# limited disambiguation of English sentences
# minimarking.g.elly

# this is a simplification of the shallow XML markup
# example application for PyElly:
#  1. Inflectional stemming is turned on, but not rewritten.
#  2. Only simple noun and verb clauses are identified.
#  3. Verb particles and prepositions are distinguished.
#  4. Conjunctive THAT and infinitive TO are focuses.
#  5. Minimal marking, no XML.

#
# principal subprocedures
#

p:twob  # simple spaced output for 2-branch rule
_
  left
  space
  right
__

# procedures needed for reuse of MARKING vocabulary rules

p:adjp  # remove trailing preposition from rewritten output
_
  obtain
  if adjf=F
    delete 3 >
    set adjf=T
    end
__

p:elma  # normalize IT IS or IT HAS in rewritten output
_
  split
  obtain
  back
  delete to
  delete to
  append IT IS
  space
  merge
__
p:elth  # capitalized THAT to end rewritten output
_
  obtain
  delete 4 <
  append THAT
__

p:thtx  # drop conjunctive THAT followed by a determiner
_
  split
  obtain
  back
  delete 5 <
  merge
  set tht=TB
__

p:xtht  # drop conjunctive THAT following certain nouns or verbs
_
  obtain
  delete 5 >
  set tht=T
__

# special procedures for syntax rule semantics

p:xthx  # insert conjunctive THAT either before or after a translation
_
  var tht=F
  split
  if typg=N
    (nbrkt)
  else
    (vbrkt)
    end
  left
  back
  if tht=TB
    (thtb)
    end
  merge
  (brkte)
  if tht=T
    (btht)
    end
__

# ###################
#
# actual syntax rules

g:SENT->SS
__
g:SS->SS PUNC[|stop]
__
g:SS->SS PUNC[|-stop]
__
g:SS->SS PUNC[|-*l,-com,-stop]
 >>--
__
g:SS->SS CONJ
#                 ?>>?
           l[!that]>>*l-4
 l[!corrl]r[!coord]>>*l
 l[!corrl]r[!corrl]>>-16
          r[!coord]>>*l[!coord,cnj]
  l[!-cnj]r[!corrl]>>*l[!corrl,cnj]
  l[! cnj]r[!corrl]>>*l[!corrl]-1
            l[!cnj]>>-1
_
  (twob)
__
g:SS->CONJ SS
 l[!corrl]>>*r[!corrl]
_
  (twob)
__

g:SS[|*unique]->ELEM
#            ?>>?
           n<2>>*r-1
      l[!spcs]>>*r-6
      l[!lv,s]>>*r-1
  l[!trng] n<3>>*r
              >>*r[!-trng]
              >>*r
__
g:SS[|*unique]->SS ELEM
#                           ?>>?
  l[!ln,ppps,rv] r[!ppps,ln] >>*r[! ln,-lv]-8
  l[!lv,ppps,rv] r[!ppps,ln] >>*r[!-ln, lv]-8
  l[!   ppps,rv] r[!ppps,ln] >>*r[!-ln,-lv]-8
  l[!ln,pro]     r[!ln]      >>*r[! ln,-lv]-3
  l[!lv,pro]     r[!ln]      >>*r[!-ln, lv]-3
  l[!   pro]     r[!ln]      >>*r[!-ln,-lv]-3
  l[!ln,pro,-brk]r[!lv]      >>*r[! ln,-lv]+2
  l[!lv,pro,-brk]r[!lv]      >>*r[!-ln, lv]+2
  l[!   pro,-brk]r[!lv]      >>*r[!-ln,-lv]+2
  l[!ln,rn]      r[!ln]      >>*r[! ln,-lv]-2
  l[!lv,rn]      r[!ln]      >>*r[!-ln, lv]-2
  l[!   rn]      r[!ln]      >>*r[!-ln,-lv]-2
  l[!   rn]      r[!pro,-brk]>>*r[! ln,-lv,-pro]
  l[!   rn]      r[!pro]     >>*r[! ln,-lv,-pro]-4
  l[!ln,rv]      r[!lv]      >>*r[! ln,-lv]-4
  l[!lv,rv]      r[!lv]      >>*r[!-ln, lv]-4
  l[!   rv]      r[!lv]      >>*r[!-ln,-lv]-4
  l[!ln]                     >>*r[! ln,-lv]
  l[!lv]                     >>*r[!-ln, lv]
                             >>*r[!-ln,-lv]
_
  (twob)
__

# - - - -

# for three kinds of bracketing in output

p:nbrkt
_
  append np〖
__

p:vbrkt
_
  append vp〖
__

p:brkts
_
  append 〖
__

p:brkte
_
  append 〗
__

p:othr
_
  append 〖
  left
  append 〗 
__

p:that
_
  append THAT
__
p:btht
_
  space
  (that)
__

p:thtb
_
  (that)
  space
__

g:ELEM->ADV[~mod] NCLU[:-dit]
 r[$trlg]>>+
         >>[!rn]+
_
  (nbrkt)
  left
  space
  var tht=F
  right
  (brkte)
  
  if tht=TB
    (thtb)
    end
__
g:ELEM->ADV[~mod] NCLU[:dit]
 r[$trlg]>>+
         >>[!rn]+
_
  (nbrkt)
  (twob)
  (brkte)
  (btht)
__
g:ELEM->THTV
_
  (thtb)
  (vbrkt)
  split
  left
  back
  delete 5 <
  merge
  (brkte)
__
g:ELEM->NCLU[:-dit,-dat, prep,-poss]
#      ?>>?
 l[&msr]>>[!ln,rn,ppps]
        >>[!rn,ppps]
_
  var adjf=F
  var typg=N
  var x
  (xthx)
  if adjf=T
    delete 1 >
    store x
    space
    append of
    insert x <
    end
__

p:noml
_
  (nbrkt)
  left
  (brkte)
__

g:ELEM->NCLU[:-dit,-dat,-prep,-poss]
#      ?>>?
 l[&1wy]>>[!rn]
 l[&adv]>>[!rn]
        >>[!ln,rn]
_
  var typg=N
  (xthx)
__
g:ELEM->NCLU[:dit]
# ?>>?
   >>[!rn]+
_
  (thtb)
  (noml)
__
g:ELEM->NCLU[:dat]
  >>[!ln]+
_
  (noml)
  (btht)
__
g:ELEM->NCLU[:-det,-qnt,poss]
  n>3 >>--------
      >>--
__

g:ELEM->PRO[=nom,-*l]
# ?>>?
   >>*l[!ln,rn,pro]
_
  (noml)
__
g:ELEM->PRO[=-nom,-prep,-*l]
# ?>>?
   >>*l[!rn,pro,brk]
_
  (noml)
__
g:ELEM->PRO[=-nom,-prep,*l,-*x]
# ?>>?
   >>*l[!rn,pro,brk]
_
  (thtb)
  (noml)
__
g:ELEM->PRO[=-nom,-prep,*l,*x] NCLU[:-prep,-qnt,-det,-num]
_
  (thtb)
  (noml)
__

g:ELEM->PRO[=-nom,prep]
# ?>>?
   >>*l[!-ln,rn,pro]
_
  (noml)
__

g:ELEM[^dit]->PEXP[|eg,-stop]
 >>++
_
  (othr)
__
g:ELEM[^dit]->PEXP[|eg,-com,-stop]
 >>*l
_
  (othr)
__


# - - - -

p:vrbl
_
  var punc=
  var typg=V
  (xthx)
__


g:ELEM[^*l]->VCLU[^-to,-s,-ed,ing]
#        ?>>?
   l[$pts]>>[!lv,rv,ppps]
  l[$trns]>>[!lv,rv,trng]
          >>[!lv,rv]
_
  (vrbl)
__
g:ELEM[^*l]->VCLU[^-to,-s,-ed,-ing]
#       ?>>?
  l[$pts]>>[!lv,rv,ppps]
         >>[!lv,rv]
_
  (vrbl)
__
g:ELEM[^*l]->VCLU[^-to,-s,ed,-ing]
#      ?>>?
 p<1 n<3>>[!lv,rv,spcs]
        >>[!lv,rv]
_
  (vrbl)
__
g:ELEM[^*l]->VCLU[^-to,-s,ed,ing]
#      ?>>?
        >>[!lv,rv]
_
  (vrbl)
__
g:ELEM[^*l]->VCLU[^-to,s]
 >>[!lv,rv,s]
_
  (vrbl)
__
g:ELEM->VCLU[^to] NCLU
 >>[!lv,rn]+
_
  (vrbl)
  space
  var punc=
  (nbrkt)
  right
  (brkte)
__
g:ELEM->THAT VCLU[^s]
 >>[!rv]++
_
  (thtb)
  var punc=
  (vbrkt)
  right
  (brkte)
__
g:ELEM->ELEM[^dit] THAT
 l[!lv]>>[!lv]++
       >>++
_
  (vrbl)
  (btht)
__
g:ELEM->THAT
 >>[!ln,rv,that]-
_
  (that)
__

g:ELEM->DATE[:-cnj]
_
  (othr)
__
g:ELEM->TIME
_
  (othr)
__
g:ELEM->ADJ[%-num]
#       ?>>?
  l[$cnj]>>--
 l[$time]>>--------
      n>2>>--
      p<1>>--------
      n>1>>----
         >>-----
_
  var vdat=
  (othr)
  if vdat=T
    (btht)
    end
__
g:ELEM->ADJ[%num]
# ?>>?
_
  (othr)
__
g:ELEM->ADJ[%-conj] CONJ[@*x]
# ?>>?
_
  (othr)
  space
  right
__
g:ELEM->ADV[~-int]
 n>2    >>-
 l[$deg]>>--
        >>---
_
  (othr)
__
g:ELEM->ADV[~int,sep]
 >>-
_
  (othr)
__
g:ELEM[^*r]->PUNC[|*l,quo] ELEM
 >>---
_
__
g:ELEM[^*l]->ELEM PUNC[|-emb,*x]
_
__

p:decom  # mark comma of translation in progress
_
# trace
  split
  left
  back
  var x
  peek x <
  if x=,
    delete 2 <
    append ,
    end
  (brkts)
  merge
  (brkte)
__

g:ELEM->MISC
 p<1 l[!spcs]>>+3
_
  (decom)
__
g:ELEM->SPCL[|*r]
_
  (othr)
__
g:ELEM->PREP['-*r] PUNC[|stop]
 l[&adv]>>----------
        >>--
_
  (othr)
  right
__

g:ELEM->CONJ[@ind] PUNC[|stop]
 >>--
_
__
g:ELEM->NEGN
 >>--------
_
  (other)
__
g:ELEM->LTAG
_
  (othr)
__

g:ELEM->PUNC[|com] OPPS
 >>--
_
__
g:OPPS->NEGN NOUN
_
  (twob)
__

g:ELEM->PCNJ
_
  (decom)
__
g:ELEM->PSTP
_
  append ,
  space
  left
  append ,
__
g:ELEM->ALLTHT VCLU
 >>++
_
  (brkts)
  append all
  (brkte)
  space
  (thtb)
  (vbrkt)
  right
  (brkte)
__
g:ELEM->ALLTHT
 >>-
_
  (nbrkt)
  append all that
  (brkte)
__

p:divide
_
  split
  left
  back
  find <
__
p:unite
_
  merge
  (brkte)
__

g:ELEM->ECJS[=idn,-*l,nom]
 >>+
_
  (divide)
  (nbrkt)
  (unite)
__
g:ELEM->ECJS[=idn,-*l,vrb,-ing]
 >>+
_
  (divide)
  (vbrkt)
  (unite)
__
g:ELEM->ECJS[=idn,-*l,vrb,ing]
 >>+++
_
  (divide)
  (vbrkt)
  (unite)
__
g:ELEM->ECJS[=idn,-*l,-nom,-vrb]
 >>+
_
  (divide)
  (brkts)
  (unite)
__
g:ELEM->ECJS[=-idn,-*l]
 >>-
_

  (divide)
  (brkts)
  (unite)
__
g:ELEM->ECJS[=*l]
 >>+
_
  (divide)
  (brkts)
  (unite)
__

p:cjpr
_
  (nbrkt)
  (twob)
  (brkte)
__

g:ELEM->CONJ[@prep,aftr] NCLU[:-plur,-prep,-det,-qnt,-ing]
      n>4>>[!rn]------
 r[&evnt]>>[!rn]++
         >>[!rn]----
_
  (cjpr)
__
g:ELEM->CONJ[@prep,aftr] NCLU[:-plur,-prep, det,-qnt]
      n>5>>[!rn]------
 r[&evnt]>>[!rn]++
 r[&durn]>>[!rn]++
         >>[!rn]----
_
  (cjpr)
__
g:ELEM->CONJ[@prep,aftr] NCLU[: plur,-prep, det,-qnt]
      n>3>>[!rn]------
 r[&evnt]>>[!rn]++
 r[&durn]>>[!rn]++
         >>[!rn]----
_
  (cjpr)
__

g:CTGN[:*r]->PUNC[|*l] CTGN[:-*l,-*r]
__
g:CTGN[:*l]->CTGN[:*r] PUNC[|*r]
__
g:ELEM->CTGN[:*l]
_
  (nbrkt)
  split
  left
  back
  find + <
  delete 1 >
  append .
  space
  merge
  (brkte)
__

g:ELEM->PUNC[|com] SERN
  >>++++
_
  append ,
  space
  (nbrkt)
  (desern)
  (brkte)
__

g:ELEM->THAV
  >>+
_
  (thtb)
  (brkts)
  split
  left
  back
  delete 5 <
  merge
  (brkte)
__

g:ELEM->CMNJ
_
  append ,
  space
  split
  left
  back
  delete 2 <
  space
  (brkts)
  merge
  (brkte)
__

g:ELEM->NAVB
_
  (othr)
__

g:ELEM->CMPC
  >>----
_
  (othr)
__

g:ELEM->PREP VCLU[^-*r,ing]
  >>[!rv]++++
_
  var adjf=F
  split
  left
  back
  if adjf=T
    (brkts)
    merge
    (brkte)
    space
    (nbrkt)
    append of
  else
    (nbrkt)
    merge
    end
  space
  right
  (brkte)
__

# - - - -

g:MISC->MISC[:*x] PUNC[|com,-quo]
 >>+++
__
g:MISC[:*l]->MISC[:*x] PUNC[|com,quo]
 >>+++
__

# - - - -

g:CJNN->CONJ[@cnj] NOUN[:-cnj,-*r]
  >>--
_
  (twob)
__
g:CJNN[@*x]->CJNN[@-*x] PUNC[|*r,quo]
__

#
# special rules for chants
#

p:lone
_
  (brkts)
  left
  right
  (brkte)
__

g:SNGL[|vrb]->VERB PUNC[|stop]
 l[$*c] n<3>>[$vls]-1
           >>-8
_
  var ltyp=verb
  (lone)
__
g:SNGL[|nom]->NOUN PUNC[|stop]
 l[$*c] n<3>>[$nls]-1
           >>-8
_
  var ltyp=noun
  (lone)
__
g:SNGL->ADJ PUNC[|stop]
 l[$*c] n<3>>-1
           >>-8
_
  var ltyp=adj
  (lone)
__
# - - - -

g:NCLU->PPTH
_
  split
  left
  back
  find <
  delete 1 >
  space
  merge
  delete 5 >
  set tht=T
__
g:NCLU->NCLU[:poss] ADJ[%est]
_
  (twob)
__

# - - - -

p:brack   # rewrite bracketing, if any
_
# trace
  var lbr=
  var rbr=
  split
  right
  back 
# view 9
# show lbr
  if ~lbr=
    insert < lbr
    end
# trace
  merge 
# view 32
# show rbr brack
  if ~rbr=
    insert < rbr
    end
__

g:NCLU[:*l,-dat]->NOUN[:-join]
 >>*l[&nml]
_
# trace
# view 32
  (brack)
# view 32
__
g:NCLU[:*l,-dat]->NOUN[:dat] THAT
 >>++
_
  left
  (btht)
__

g:NCLU[:*r,det,dit]->DET[@dit] NCLU[:-det,-prep,-dit]
 >>*r
_
  (twob)
__
g:NCLU[:*l,dat]->NCLU[:-dat] THAT
 l[&stry]>>++
         >>-8
_
  left
__
g:NCLU[:*r,det,num]->DET[@sgl,num] NCLU[:-det,-prep,-plur]
 l[!spcs]r[&cond]>>*r[&nolt]+
         r[&cond]>>*r+
         l[!spcs]>>*r[&nolt]
                 >>*r
_
  (twob)
__
g:NCLU[:*r,det,num]->DET[@sgl,num] NCLU[:-det,-prep,sgl,plur]
  >>*r
_
  (twob)
__
g:NCLU[:*r,det]->DET[@sgl,-num] NCLU[:-det,-prep,-plur]
 l[!spcs]r[&cond]>>*r[&spcs]+
         r[&cond]>>*r+
         l[!spcs]>>*r[&nolt]
                 >>*r
_
  (twob)
__
g:NCLU[:*r,det]->DET[@-sgl] NCLU[:-det,-prep]
#       ?>>?
 l[!spcs]>>*r[&nolt]
         >>*r
_
  (twob)
__

g:NCLU[:det]->NCTH
_
  (twob)
  set tht=T
__

g:NCLU[:*r,prep]->PREP['-cnj] NCLU[:-prep,-det,num]
#      ?>>?
 r[&msr]>>*r
        >>*r[&-msr]+
_
  (twob)
__
g:NCLU[:*r,prep]->PREP['-cnj] NCLU[:-prep,det,num]
 >>*r[&-msr]+
_
  (twob)
__
g:NCLU[:*r,prep]->PREP['-cnj,-mod] NCLU[:-prep,-num]
 >>*r[&-msr]+
_
  (twob)
__
g:NCLU[:*r,prep]->PREP['-cnj,mod] NCLU[:-prep,-num,det]
 n<3>>++
_
  (twob)
__
g:NCLU[:*r,prep]->PREP['-cnj,mod] NCLU[:-prep,-num,-det]
_
# trace
  (twob)
__

g:NCLU[:*r]->DATE[:-cnj,-*r] NCLU[:-prep,-det,-qnt,-num]
 >>--
_
  (twob)
__

# # # #

g:NCLU[:*l]->NCLN[:num,val] POSTP[@adv]
#             ?>>?
  r[$trlg,spat]>>*l[&adv]++++++
               >>*l[&adv]++
_
  (twob)
__
g:NCLU[:*l]->NCLN[:num,val] POSTP[@-adv]
#        ?>>?
  r[$trlg]>>*l[&adv]++++
          >>*l[&adv]++
_
  (twob)
__
g:NCLU[:*r,num]->NCLN[:-qnt] NCLU[:-prep,-det,-qnt,-num,-ing]
#        ?>>?
  r[&cmpd]>>*r----
          >>*r++
_
  (twob)
__
g:NCLU[:*r]->NCLN
 >>*l-
__

g:NCLN[:num,val]->NUM NOUN[:plur]
  r[&msr]>>*r++
         >>-
_
  (twob)
__
g:NCLN[:num,val,qnt]->QUAN[@num,ind] NOUN[:plur]
  r[&msr]>>*r++
         >>------
_
  (twob)
__
g:NCLN[:*l]->NCLN[:num,val,cnj] NUM[:*r]
_
  (twob)
__
g:NCLN[:num,val,cnj]->MONEY
__

g:NCLU[:*l]->NCLU ADJ
 n<3 l[$*c]r[$*c]>>*l++++
     r[$trlg,prd]>>*l++
          r[$prd]>>*l+
                 >>*l------
_
  (twob)
__
g:NCLU[:*l]->NCLU[:num] POSTP[@num]
  l[&durn,msr]r[$trlg]>>++
                      >>------
_
  (twob)
__

g:NCLU[:num]->NUM
 n<2>>----
_
  (twob)
__
g:NCLU[:det,plur]->DEM[@ind,plur]
 >>[&1wy]---
__
g:NCLU[:det]->DEM[@ind,-plur]
 l[!spcs]>>-----
         >>[&1wy]---
__
g:NOUN->ADJ[%mod,to] MONEY
_
  (twob)
__

g:NCLU[:*r,det,dit]->DEM[@dit] NCLU[:-det,-prep,-qnt,-dit]
  >>*r+
_
  (twob)
__
g:NCLU[:*r,det]->DEM[@-sgl,-plur,-dit] NCLU[:-det,-prep,-qnt,-dit]
#                 ?>>?
 l[!-*c,spcs]r[&*c]>>*r----
                   >>*r+
_
  (twob)
__
g:NCLU[:*r,det,sgl]->DEM[@sgl,-dit] NCLU[:-det,-prep,-plur,-qnt,-dit]
#                 ?>>?
 l[!-*c,spcs]r[&*c]>>*r----
                   >>*r++
_
  (twob)
__
g:NCLU[:*r,det]->DEM[@plur,-dit] NCLU[:-det,-prep,plur,-qnt,-dit]
# ?>>?
  >>*r++++
_
  (twob)
__
g:NCLU[:*r,det]->DEM[@sgl,*l] NCLU[:det,-prep,-plur,-qnt,*x]
  n>2 >>----
      >>++++
_
  (twob)    # ????
__
g:NCLU[:*r]->ADJ[%-ed,-ing,-cnj,-*l] NCLU[:-det,-prep,-num,-qnt]
#             ?>>?
       r[&spcs]>>*r[&cmpd]+
 l[$ind]r[&quo]>>*r[&cmpd]----
        r[&quo]>>*r[&cmpd]
   l[$*c]r[&*c]>>*r[&cmpd]+++++
               >>*r[&cmpd]++++
_
  (twob)
__
g:NCLU[:*r]->ADJ[%ed,-cnj] NCLU[:-det,-prep,-num,-qnt]
#             ?>>?
       r[&cmpd]>>*r----
 l[$ind]r[&quo]>>*r[&cmpd]----
        r[&quo]>>*r[&cmpd]
               >>*r[&cmpd]+++
_
  (twob)
__
g:NCLU[:*r]->ADJ[%ing,-cnj] NCLU[:-det,-prep,-num,-qnt]
       r[&prop]>>----
 l[$ind]r[&quo]>>*r[&cmpd]----
        r[&quo]>>*r[&cmpd]
               >>*r[&cmpd]++
_
  (twob)
__
g:NCLU[:*r,num]->NUM NCLU[:-det,-prep,-num,-qnt, plur]
#       ?>>?
 l[&prop]>>*r--
 r[&cmpd]>>*r[&adv]++++
  r[&msr]>>*r++++
         >>*r++
_
  (twob)
__
g:NCLU[:*r,num]->NUM NCLU[:-det,-prep,-num,-qnt,-plur]
#        ?>>?
 l[&-prop]>>---
  r[&cmpd]>>*r[&adv]++++
          >>*r++
_
  (twob)
__
g:NCLU[:qnt,num,plur]->QUAN[@ind,plur]
 l[!corrl]>>[&1wy]----
          >>[&1wy]--
__
g:NCLU[:qnt,num]->QUAN[@ind,-plur]
 l[!corrl]>>[&1wy]----
          >>[&1wy]--
__
g:NCLU[:*r,det,qnt]->QUAN[@ind] NCLU[:-prep,-ing,-plur]
#                ?>>?
          l[!mltp]>>*r--------
 l[!corrl]r[&-nml]>>*r------
                  >>*r++
_
  (twob)
__
g:NCLU[:*r,det,qnt]->QUAN[@ind] NCLU[:-prep,-ing,plur]
#                ?>>?
 l[!corrl]r[&-nml]>>*r------
                  >>*r++
_
  (twob)
__

g:NCLU[:*r,det,qnt]->QUAN[@-ind] NCLU[:-prep]                       
#                ?>>?
 l[!corrl]r[&-nml]>>*r------
                  >>*r++
_
  (twob)
__
g:NCLU[:*r]->NCLU[:poss,-det,-prep] NCLU[:-poss,-det,-prep]
#       ?>>?
 r[$trlg]>>*l[$trlg]++
         >>*l++
_
# trace
  (twob)
__
g:NCLU[:*r,det]->NCLU[:poss,det,-prep] NCLU[:-poss]
#       ?>>?
 r[$trlg]>>*l[$trlg]++
         >>*l++
_
# trace
  (twob)
__
g:NCLU[:det]->DET NUM  # ####
 >>--
_
  left
  space
  split
  right
  back
  delete 2 <
  var tem
  store tem
  if tem=1
    append one
    merge
  else
    insert < tem
    merge
    end
__
g:NCLU[:*l,poss]->NCLU APOS
 >>*l-
__
g:NCLU[:det]->DET ADJ
#      ?>>?
 r[$ind]>>-
        >>----
_
  (twob)
__

g:PRO->DET[@the] PRO[=one]
 >>++++++++++
_
  (twob)
__

g:NCLU->PRO[=one]  # ####
 >>--
__
g:NCLU[:*l,cnj]->NAVB[:-*x]
 >>--
__
g:NCLU[:*l,cnj]->NAVB[:*x]
 >>-
_
  (twob)
__

g:NCLU[:*r]->NEGN NCLU[:prep]
 >>-
_
  (twob)
__
g:NCLU[:*r]->NEGN NCLU[:-prep,det]
 >>-
_
  (twob)
__

g:NCLU->DATxx
__

g:NCLU->QUAN[@*x] NOUN[:ing,-det]
  >>+++
_
  (two)
__

g:NCLU->DEM NAVB
_
  (twob)
__

g:NCLU[:*r]->NUM NAVB[:plur]
_
  (twob)
__

g:NCLU->DET NAVB
  >>--
_
  (twob)
__

g:NCLU[:qnt]->QUAN DATE
_
  (twob)
__

# - - - -

g:VCLU[^*r,infn]->TO VCLU[^-aux,-infn,-s,-ing]
 >>++
_
  (twob)
__
g:VCLU[^*l]->VERB[^-*r] VCLU[^infn]
#       ?>>?
 r[$cmpd]>>*r--
         >>*r[$cmpd]++
_
  (twob)
__
g:VCLU[^*r]->VCTH
_
  left
  set tht=T
__

g:VCLU->PRPV VCLU[^ing]
  >>--
_
  (twob)
__

g:VCLU->VCLU PREP
 >>*l-10
_
  left
  space
  (brkts)
  right
  (brkte)
__
g:VCLU[^*l]->VERB
# ?>>?
   >>*l
__

g:VCLU[^*r]->ADV[~-cplx] VCLU[^-ed,-ing]
  l[$deg]>>*r------
 l[$trlg]>>---
 l[$cond,-cmpd]>>+
_
  (twob)
__
g:VCLU[^*r,-*r]->ADV[~-cplx] VCLU[^ing]
  l[$cnj]>>*r------
  l[$deg]>>*r------
 l[$trlg]>>---
 l[$cond,-cmpd]>>+
_
  (twob)
__
g:VCLU[^*r]->ADV[~-cplx] VCLU[^ed]
 l[$deg,cmpd]>>*r+
     l[$trlg]>>---
 l[$cond,-cmpd]>>+
_
# view
  (twob)
__

g:VCLU[^*l]->VCLU ADV[~-mod,-dir,-trlg]
#         ?>>?
  r[$cond] >>*l------
  r[$deg]  >>*l++
  r[$prd]  >>*l++++
  l[$-trns]r[$trlg]>>*l+
  r[$time] >>*l++
  r[$spat] >>*l+
  >>----
_
  (twob)
__
g:VCLU[^*l]->VCLU ADV[~dir,trlg]
  l[$spat]>>++
  r[$time]>>++
          >>-
_
  (twob)
__
g:VCLU[^*l]->VCLU[^-*l] NAVB
  >>*l++++
_
  (twob)
__
g:VCLU[^hav,*r]->HAVE VCLU[^-hav]
 r[$cond]>>*r++
_
  (twob)
__
g:VCLU->PRO AUXL[^-*r]
 >>----
_
  (twob)
__
g:VCLU[^aux,*r]->AUXL[^-*r,-ptcl] VCLU[^-aux]
 l[$quo] >>*r-4
 l[$cond]>>*r+3
 r[$cond]>>*r+2
         >>*r+1
_
  (twob)
__
g:VCLU[^aux,*r]->AUXL[^-*r,ptcl] VCLU[^-aux]
_
  (twob)
__
g:VCLU[^*r,-ing]->BE VCLU[^ing,-aux,-hav]
 >>*r++
_
  (twob)
__
g:VCLU[^*r]->BE[^-ing] VCLU[^ed,-aux,-hav]
 >>*r+
_
  (twob)
__
g:VCLU[^*r,ing,-ed]->BE[^ing] VCLU[^ed,-hav]
 >>*r+
_
  (twob)
__
g:VCLU->AUXL PUNC
__
g:VCLU[^*r]->VCTH
_
  left
  delete 5 >
  set tht=T
__

g:VCLU[^*r]->NEGN VCLU[^infn]
_
  (twob)
__

g:SVED[^aux]->BE SVED
_
  (twob)
__
g:VCLU[^ing]->SVED[^aux] VERB[^ing]
 >>+11
_
  (twob)
__

g:VCLU->PRO[=nom] AUXL
  >>------
_
  (twob)
__

g:VCLU[^*r]->ADV[~mod] VCLU[^ing]
 l[$deg]>>+
        >>-
_
  (twob)
__

# - - - -

g:DATE->NOUN[:plur] POSTP[@adv]
 l[&durn,msr]>>++
             >>--------
_
  (twob)
__
g:DATN->NOUN[:-plur] POSTP[@adv]
 >>--
_
  (twob)
__
g:DATE->DET[@num,sgl] DATN
 >>++++
_
  (twob)
__
g:DATE->QUAN DATN
 >>-
_
  (twob)
__

g:DATE->PREP NAVB
 >>++
_
  (twob)
__
g:DATE[:*r]->PREP['-cnj,-*l] DATE[:-cnj,-poss]
 n<3c<8>>+++++
       >>++
_
  (twob)
__
g:DATE[:*r]->PREP['-cnj,*l] DATE[:-cnj,-poss]
 >>++
_
  (twob)
__

g:DATE->NUM ADV[~date]
 >>+15
__
g:DATE->ADV[~timg] DATE
 n<3>>++
    >>-
_
  (twob)
__

g:DATE->DET[@the] DATE[:-cnj,plur]
 >>+
_
  (twob)
__

g:DATE->DATE DATE[:-cnj,-*l]
_
  (twob)
__
g:DATE->DATE DATE[:*l]
 >>++++
__

g:DATE[:cnj]->PUNC[|*l] DATE[:-cnj]
 n>4>>--------
__
g:DATE->DATE[:cnj] PUNC[|*r]
 >>+++
__

g:DATE->MNRG DATE
_
  (twob)
__

g:DATxx->DATxx ADV[~date]
 >>++
_
  (twob)
__

g:DATE->ADJ[%-ed,-ing] DATE[:*r]
  l[$time]>>++++
__

g:DATE->ADJ[%*x] DATE
  c<12 >>++++
       >>--
_
  (twob)
__

g:DATE->ADJ[%-*l,-*r,-ed,-ing] DATE
 l[$time]>>++
         >>----
_
  (twob)
__

g:DATY->CONJ[@cnj] DATE
  >>*r+
_
  (twob)
__
g:DATE[:*r]->DATE DATY
  >>*r++++
_
  (twob)
__

# - - - -

g:XID->NUM[:-*l,-*r]
#       ?>>?
 l[&prop]>>----
      n>1>>------
      c>4>>------
__
g:NOUN[:*l]->NOUN PRO[=rflx]
 >>++
_
  (twob)
__
g:NOUN[:*l]->NOUN NUM[:cnj,-*x]
 r[&cmpd]>>------
      n>3>>----
         >>++
_
  (twob)
__
g:NOUN[:qnt]->NOUN[:qnt] ADJ[%-*l,-*r]
 >>+
_
  (twob)
__
g:NOUN->CMPN
_
  split
  left
  back
  find . <
  space
  merge
__
g:NOUN[:ing]->BE[^ing] VERB[^ed]
 >>-
_
  (twob)
__


g:NOUN->UNKN
  l[&*c]>>[&*c]
__
g:NOUN->VERB SUFX[#vTOn]
  n>2 >>----
_
  (twob)
__
g:NOUN->ADJ SUFX[#aTOn]
_
  (twob)
__
g:NOUN->NOUN SUFX[#nTOn]
 >>*l
_
  (twob)
__
g:NOUN[:ing]->VERB XING
#       ?>>?
 l[$trns]>>*l---
         >>-
_
  (twob)
__
g:NOUN[:*l]->NOUN[:ing] NAVB
 >>++
_
  (twob)
__
g:NOUN[:*r]->TITL NOUN
  >>+
_
  (twob)
__
g:NOUN[:join]->NOUN[:-join] PUNC[|hyph]
__
g:NOUN[:*r]->NOUN[:-det,join] NOUN
# ?>>?
   >>*r++
__
g:NOUN[:*r,cnj]->NOUN[:-*l,-join,-poss,-ing,-plur,-det,-qnt] NOUN[:-cnj,ing,-det]
#       ?>>?
 r[&prop]>>*r-2
 l[&spcs]>>*r-2
 l[&*c]r[&-*c]>>*r-4
_
  (twob)
__
g:NOUN[:*r,cnj]->NOUN[:-*l,-join,-poss,-ing,-plur,-det,-qnt] NOUN[:-cnj,-ing,-det]
#                  ?>>?
             r[&two]>>*l+2
   l[&spcs,*c]r[&*c]>>*r+2
 l[&-*c]r[&prop,nml]>>*r+1
            r[&prop]>>*r-2
            l[&spcs]>>*r-2
        l[&*c]r[&*c]>>*r+3
       l[&-*c]r[&*c]>>*r[&-*c]+2
              l[&*c]>>*r+2
                    >>*r+1
_
  (twob)
__
g:NOUN[:*r,cnj]->NOUN[:-*l,-join,-poss,-ing, plur, sgl,-det,-qnt] NOUN[:-cnj,-ing,-det]
#                ?>>?
 l[&spcs,*c]r[&*c]>>*r+2
          r[&prop]>>*r-2
          l[&spcs]>>*r-2
      l[&*c]r[&*c]>>*r+3
     l[&-*c]r[&*c]>>*r[&-*c]+2
                  >>*r+1
_
  (twob)
__  
g:NOUN[:*r,cnj,plur]->NOUN[:-*l,-join,-poss,-ing,plur,-sgl,-det,-qnt] NOUN[:-cnj,-ing,-det,-plur]
#           ?>>?
     r[&cond]>>-6
     r[&prop]>>*r+2
 l[&*c]r[&*c]>>*r+3
       l[&*c]>>*r+1
             >>-4
_
  (twob)
__
g:NOUN[:*r,cnj]->NOUN[:-*l,-join,-poss,-ing,plur,-sgl,-det,-qnt] NOUN[:-cnj,-ing,-det, plur]
#             ?>>?	
       r[&cond]>>-6
       r[&prop]>>*r-2
 l[&-*c]r[&-*c]>>-4
  l[&*c]r[&-*c]>>*r+1
               >>-4
_
  (twob)
__

g:NOUN->NOUN[:*r] ACRO
_
  (twob)
__

g:NOUN[:*l,-*l]->NOUN[:*x,-*l,-ing] XID
    c>4>>-3
 l[&*c]>>+4
       >>-3
_
  (twob)
__
g:NOUN[:*l,-*l]->NOUN[:*x,-*l, ing] XID
 c>4>>-3
    >>-2
_
  (twob)
__
g:NOUN[:*l,-*l]->NOUN[:-*x,-*l,-plur,-ing] XID
 l[&*c]r[!*c]>>+2
       r[!*c]>>-1
      l[&-*c]>>-3
_
  (twob)
__
g:NOUN->ABBR
 >>[&*c]
__
g:ABBR->ABBR[:*x] ABBR
 >>[&*c]++++
__
g:PRO[=*r,-one,prep]->PREP['-cnj,-prx] PRO[=-nom]
_
  (twob)
__
g:PRO[=*r,-one,prep]->PREP['-cnj,prx] PRO[=-nom,-one]
 >>++
_
  (twob)
__

g:DET[@*l]->DET DATE[:-plur]
 >>[!spcs]+
_
  (twob)
__
g:ADJX[%*r,lquo]->PUNC[|*l,quo] ADJ
 >>--
__
g:ADJ[%*l,-lquo,-*l]->ADJX[%lquo] PUNC[|*r,quo,-com]
 >>+8
__
g:ADJ[%*l,-lquo,-*l,cnj]->ADJX[%lquo] PUNC[|*r,quo,com]
 >>+8
__

g:VERB->UNKN
 >>--
__
g:VERB[^beaj,to]->ADJ[%to] TO
 l[$spat]>>++
  l[$vls]>>------
         >>+
_
  if be=
    append [be]
    end
  space
  (twob)
__
g:VERB[^beaj,to]->BE VERB[^beaj,to]
 >>++++
_
  var be=T
  append be
  space
  right
__
g:VERB[^*r,proc]->VERB[^proc] VERB[^ing]
 >>++
_
  (twob)
__
g:VERB[^*l]->VERB[^proc] ADJ
 >>+++
_
  (twob)
__
g:VERB->NOUN SUFX[#nTOv]
_
  (twob)
__
g:VERB->ADJ SUFX[#aTOv]
_
  (twob)
__
g:VERB[^*r]->NOUN[:join] VERB
_
  (twob)
__
g:VERB[^beaj]->BE ADJ[%-ed,-ing,-num]
      n>4>>--
 r[$cmpd]>>++++
      n<3>>++
         >>+
_
  (twob)
__
g:VERB[^*l]->VERB[^chng] ADJ[%-*x]
 >>*l+++
_
  (twob)
__
g:VERB[^*l,to]->VERB[^beaj] TO
 >>+
_
  (twob)
__
g:VERB[^*r,neg]->NEGN VERB[^ing,-neg]
 >>-
_
  (twob)
__
g:VERB[^*l]->BE
 >>-
__
g:VERB[^hav]->HAVE
 >>-
__
g:VERB->AUXL[^*l] ADV
 n<3 >>++
     >>----
_
  (twob)
__
g:BE->BE XED
 >>+
_
  (twob)
__
g:BE->BE XING
 >>+
_
  (twob)
__
g:BE->BE ADV[~timg]
 >>++
_
  (twob)
__
g:HAVE->HAVE XED
 >>+
_
  (twob)
__
g:HAVE->HAVE XING
 >>+
_
  (twob)
__

g:ADJ->NOUN SUFX[#nTOa]
_
  (twob)
__
g:ADJ[%*r,more]->ADV[~-cplx] ADJ[%er]
    n>4 >>-4
 l[$deg]>>+8
_
  (twob)
__
g:ADJ[%*r,more]->ADV[~-int,-timg,-cplx] ADJ[%-er,-ed]
    n>4 >>-4
 l[$deg]>>[$cmpd]+6
_
  (twob)
__
g:ADJ[%*r]->ADV[~-int,timg,-cplx] ADJ[%-er,-ed]
  >>+4
_
  (twob)
__
g:ADJ[%*r,more]->ADV[~-int,-cplx] ADJ[%-er,ed]
     n>3 >>-4
 l[$time]>>-4
 l[$deg] >>[$cmpd]+6
_
  (twob)
__
g:ADJ[%*r,more]->ADV[~int,-cplx] ADJ[%-er]
  n>3 >>-4
      >>+4
_
  (twob)
__
g:ADJ[%dat]->ADJ[%more] THAT
 >>++
_
  left
  set vdat=T
__
g:ADJ[%*r]->NOUN[:join] ADJ
 >>++
__
g:ADJ[%ed]->VERB[^ed,-dit,-*r,-*x]
 l[$noaj]>>-------
      n<2>>---------
      p<1>>-
         >>[$ind]--
__
g:ADJ[%ing]->VERB[^ing,-proc,-ed]
      n<2>>------
 l[$trns]>>-----
      n>2>>-----
         >>--
__
g:ADJ->VERB SUFX[#vTOa]
_
  (twob)
__
g:ADJ[%*r]->ADV[~cnj,-cplx] ADJ
 n<3>>*r[$cnj]++++
 n>3>>----
_
  (twob)
__

g:ADV->ADJ SUFX[#aTOr]
 >>[$prd]
_
  (twob)
__
g:ADV->VERB SUFX[#vTOr]
_
  (twob)
__
g:ADV[~*r,cnj]->ADV[~-int,-cnj,-cplx] ADV[~-cnj]
 l[$trlg]>>--
  l[$deg]>>*r++++
      n>7>>----
      n>5>>--
         >>*r+
_
  (twob)
__
g:ADV[~*l]->ADV NAVB
#           ?>>?
          n>2>>------
 l[$deg,time]>>*l++++++
             >>----
_
  (twob)
__
g:ADV->QUAN NAVB
 >>++++
_
  (twob)
__
g:ADV->NEGN ADV[~-non]
 >>+
_
  (twob)
__
g:ADV[~cnj]->CONJ[@prep] DATE[:-cnj]
 >>++++
_
  (twob)
__
g:ADV->PREP['*r] QUAN
 >>[$deg]--
_
  (twob)
__

g:ADJ->NEGN ADJ
 >>-
_
  (twob)
__
g:ADJ[%cnj,*r]->CONJ[@cnj] ADJ[%-*x]
 n>3>>*r----
 n>2>>*r---
    >>*r--
_
  (twob)
__
g:ADJ[%*r,-cnj]->ADJ[%-*r,-*x] ADJ[%cnj]
 >>*r++++
_
  (twob)
__
g:ADJ->ADJ[%-ing] ADJ[%ing]
 n>3>>*r----
    >>*r+++
_
  (twob)
__
g:ADJ[%*l,-*l]->ADJ[%*r] ACRO
 l[$*c]>>+
        >>----------
_
  (twob)
__

g:PREP->ADJ TO
 l[$spat]>>++
         >>----------
_
  (twob)
__
g:PREP['cnj]->PREP['-cnj] CONJ[@-*r,-rel]
 >>+
_
  (twob)
__
g:PREP->PREP['cnj] PREP
 >>++++
__
g:PREP->ADV[~dir] PREP['of]
 >>++
_
  (twob)
__
g:PREP->PREP['on] TO
_
  (twob)
__
g:PRPX->DCNJ PREP['-cnj]
_
  (twob)
__
g:PRPX['*l]->PRPX['-*l] PUNC[|-*l,-*r,-stop,*x]
_
  (twob)
__
g:PREP->PREP['-cnj] PRPX['*l]
_
  (twob)
__

g:MONEY->ADV[~mod] MONEY
  >>[&cmpd]++
_
  (twob)
__
g:MONEY->MONEY ADV[~*r,*x]
  >>++
_
  (twob)
__

# - - - -

g:NUM->ADJ[%mod] NUM
 >>+++
_
  (twob)
__
g:NUM->ADV[~mod] NUM
 l[$deg]>>[&cmpd]++++
        >>[&cmpd]+
_
  (twob)
__
g:NUM[:*r]->ADV[~ord] NUM[:-*r]
 >>++
_
  (twob)
__
g:NUM[:*l]->NUM[:-*l,-cnj] POSTP[@num]
 >>+
_
  (twob)
__
g:NUM->NUM[:-cnj] NUM[:cnj,-prep,-*r]
    >>+++++
_   
  (twob)   # "3 in 4"
__
g:NUM[:cnj]->PREP['div] NUM[:-cnj,-prep,-*r]
 >>--
_
  (twob)
__
g:NUM[:cnj]->NUM[:cnj] NUM[:cnj]
 n<4>>------
 n<5>>+++++++++
    >>------
_
  (twob)
__
g:NUM->NUM[:-cnj,-*l,-*r] NUM[:*r]
_
  (twob)
__

g:NUM[:prep]->PREP['prx] NUM[:-prep]
 n<3>>++
_
  (twob)
__

g:NUM[:*r]->QUAN[@*x] NUM[:-*r]
  >>++
_
  append 1 of
  space
  right
__

g:NUM[:cnj]->ADV[~prox] NUM[:cnj]
  >>--
_
  (twob)
__

g:NUMX->CONJ[@cnj] NUM
 >>*r
_
  (twob)
__
g:NUM[:*r]->NUM NUMX
  >>*r++++
_
  (twob)
__

#
# simple inflections
g:NOUN[:*l,plur]->NOUN[:-*l,-*r] XS
#       ?>>?
 l[&sglo]>>*l--
         >>*l
_
  (twob)
__
g:NOUN[:plur]->UNKN XS
  l[&*c]>>[&*c]
_
  (twob)
__
g:VERB->UNKN XS
_
  (twob)
__
g:VERB[^ed]->UNKN XED
_
  (twob)
__
g:VERB[^ing]->UNKN XING
_
  (twob)
__
g:VERB[^*l,s]->VERB[^-*l,-*r] XS
_
  (twob)
__
g:VERB[^*l,ed]->VERB[^-*l,-*r] XED
 >>*l++++
_
  (twob)
__
g:VERB[^*l,ing]->VERB[^-*l,-*r] XING
# ?>>?
   >>*l
_
  (twob)
__
g:VERB[^*l,-ptcl]->VERB[^ptcl] PTCL   # inherited feature may be turned off in v1.3
 >>*l[$pts]+++
_
  (twob)
__
g:VERB[^*l,-ptcl]->VERB[^ptcl] TO     #
 >>*l--
_
  (twob)
__
g:VERB[^*l]->VERB PREP['mod]
 >>*l[$trns]++
_
  (twob)
__

g:ADJ[%*l,er,-*l]->ADJ[%-*l,-*r] XER
 n>2 >>----
     >>*l
_
  (twob)
__
g:ADJ[%*l,-*l]->ADJ[%-*l,-*r] XEST
 >>*l
_
  (twob)
__
g:ADJ[%*r]->ADV[~int,-cplx] ADJ
 n>4 >>----
     >>*r++
_
  (twob)
__
g:ADJ[%*r]->ADV[~mod,-cplx] ADJ
 n>4 >>----
     >>++++
_
  (twob)
__
g:ADJ[%*l]->ADJ[%er] CMPC
 >>*l++
_
  (twob)
__
g:ADJ[%num]->NUM UNIT
 n<4 >>++++
     >>++
__
g:ADJ[%num,*l]->ADJ[%num,-*l] ADV[~trlg]
# r[$deg]>>++
_
  (twob)
__

g:ADV->ADV[~int] ADV
 >>++++
_
  (twob)
__
g:ADV[~er]->ADV XER
 >>----
_
  (twob)
__
g:ADV[~*l]->ADV[~er] CMPC
_
  (twob)
__
g:ADV[~*r]->NCLU[:-prep,-det,num] ADV[~trlg]
 l[&msr]>>++
        >>----
__
g:ADV[~*r]->NCLU[:-prep,-det,-num,plur] ADV[~trlg]
 l[&msr]>>++++
        >>----
__
g:ADV[~*r]->NCLU[:-prep,-det,num] ADVX
 l[&msr]>>++
        >>----
__

g:DEM[@*r]->PREP['-cnj,-mod] DEM[@ind]
 >>-
__
g:TIME[:*r]->PREP['-cnj,-*l] TIME
 >>++
_
  (prep)
__
g:TIME[:*r]->PREP['-cnj,*l] TIME
 >>++
_
  (twob)
__

g:CONJ->ADV[~mod] CONJ
 >>+
_
  (othr)
  space
  right
__
g:CONJ->NEGN CONJ
_
  (twob)
__
g:CONJ->CONJ[@-*l,-rel] PUNC[|com]
 >>+
__

g:QUAN->ADV[~prox] QUAN
 >>++
_
  (twob)
__
g:QUAN->QUAN QUAN
 >>+++
_
  (twob)
__
g:QUAN->ADV[~prox] NOUN[:val]
 >>++
_
  (twob)
__

#
# predicate negation

g:AUXL[^neg,*l]->AUXL[^-neg] NEGN
 >>*l
_
  (twob)
__
g:BE[^*r,neg]->NEGN BE[^ing,-neg]
_
  (twob)
__
g:BE[^neg,*l]->BE[^-neg] NEGN
_
  (twob)
__
g:HAVE[^neg,*l]->HAVE[^-neg] NEGN
_
  (twob)
__
g:AUXL[^hav]->HAVE[^-neg] TO
 >>++++
_
  (twob)
__
g:AUXL[^*l]->AUXL ADV[~-*l,-*r]
 >>+
_
  (twob)
__
g:NEGN->ADV NEGN
 >>+
_
  (twob)
__


#
# compound auxiliaries

g:AUXL[^*r]->AUXL[^-to] AUXL[^-to]
 >>++
_
  (twob)
__
g:AUXL[^to]->AUXL[^-to] AUXL[^to]
 >>++
_
  (twob)
__
g:AUXL->AUXL QUAN[@cnj]
 >>++
_
  (twob)
__
g:AUXL[^*l,ptcl]->AUXL[^-*r,-ptcl] PRO
 p<3>>++
    >>-
_
  (twob)
__
g:AUXL[^*l,ptcl]->AUXL[^-*r,-ptcl] NCLU[:-prep]
 n<3 r[$-*c]>>-----
 n<3 p<3    >>[$nls]++++
            >>[$nls]----
_
  (twob)
__

g:HAVE->HAVE QUAN[@cnj]
 >>++
_
  (twob)
__

#
# special contextual check
g:DEM[@*r,dit]->THAT DEM
_
  right
__
g:DET[@*r,dit]->THAT DET
_
  right
__

# # # # # # # #

p:opnpl  # open  parenthesis
_
  left
  delete 1 >
  store lbr
  right
__
p:clspr  # close parenthesis
_
  left
  right
  delete 1 >
  store rbr
__

g:NOUN[:*r]->PUNC[|*l,*x] NOUN
 >>+
_
  (opnpl)
__
g:NOUN[:*l]->NOUN PUNC[|*r,*x]
 >>+
_
  (clspr)
__
g:VERB[^*r]->PUNC[|*l,*x] VERB
 >>+
_
  (opnpl)
__
g:VERB[^*l]->VERB PUNC[|*r,*x]
 >>+
_
  (clspr)
__
g:DET[@*r]->PUNC[|*l,*x] DET
 >>+
_
  (opnpl)
__
g:DET[@*l]->DET PUNC[|*r,*x]
 >>+
_
  (clspr)
__
g:DET->DET[@the] DATE[:-cnj,-plur]
 >>++++
_
  (twob)
__
g:CONJ[@*r]->PUNC[|*l,*x] CONJ
_
  (opnpl)
__
g:CONJ[@*l]->CONJ PUNC[|*r,*x]
 >>+
_
  (clspr)
__
g:CNJA->CONJ AUXL
 l[!coord]>>
          >>--
_
  (twob)
__
g:CNJX->DCNJ CONJ
_
  (twob)
__
g:CNJX['*l]->CNJX['-*l] PUNC[|-*l,-*r,-stop,*x]
_
  split
  (twob)
  back
  delete 2 <
  merge
  delete 2 >
__
g:CONJ->CONJ CNJX['*l]
_
  (twob)
__
g:AUXL->AUXL CNJA
 >>++
_
  (twob)
__
g:AUXL[^*r]->PUNC[|*l,quo] AUXL
 >>[$quo]++
_
  (twob)
__
g:AUXL->AUXL[^*r] PUNC[|*r,quo]
 l[$quo]>>+
        >>--
_
__
g:ADJ[%*l,rquo]->ADJ[%-rquo,-*x] PUNC[|quo,-com,*r]
 l[$*c]>>--
__

g:HAVE[^ed]->XD
_
  append 'd
__
g:AUXL->XD
 >>-
_
  append 'd
__

g:NOUN[:num]->CONJ[@qnt] NUM[:cnj]
 r[&two]>>[&two]++++
        >>-
_
  (twob)
__
g:ADV->GENR PREP['of]
 >>-2
__
g:VERB[^*r,hav,ing]->HAVE[^ing] VERB[^ed]
 >>+4
_
  (twob)
__

g:TITL[@dot]->TITL[@-dot] PUNC[|stop,*x]
 >>++++
__

g:ADJX[%cnj]->ADJ PUNC[|com]
 l[$cmpd]>>----
         >>*l
__
g:ADJX[%cnj]->ADJ CONJ[@cnj,-rel]
 l[$cmpd]>>----
         >>*l--
_
  (twob)
__
g:ADJX[%*l]->ADJX[%cnj] CONJ[@cnj,-rel]
  >>*l+
_
  (twob)
__
g:ADJ[%*r]->ADJX[%cnj] ADJ[%-ed,-ing,-num]
# ?>>?
   >>*l++++++
_
  (twob)
__
g:ADJX[%*r]->ADJX[%cnj] ADJX[%cnj,-*r]
  >>+++++++++
_
  (twob)
__

g:HYPA->PUNC[|hyph] VERB[^ed]
__
g:ADJ->ADV HYPA
 n>4>>----
    >>++++
__

# - - - -

g:PUNC[|*l]->PUNC[|*l,quo] NEGN
 >>-
__
g:PUNC[|*l,-*l]->PUNC[|-*l,-*r] SPCL[|*r,-*x]
 >>++
__
g:PUNC[|*r,quo]->PUNC[|*r,quo] SPCL[|*r,-*x]
 >>++
__
g:PUNC[|*r]->PUNC[|*r,-quo] SPCL[|*r,-*x]
 >>++
__
g:NOUN->NOUN SPCL[|*r]
 >>+
_
 (twob)
__

g:PREF[|hyph]->PREF[|-hyph] PUNC[|hyph]
 >>+++
__
g:ADJ->PREF NOUN
 >>++
__
g:ADJ->PREF ADJ
 >>++
__
g:ADJ->NOUN HYPA
 >>++++
__

# do NOT enforce exact correlation!

g:ECJS[=*l]->ECJS[=idn] ECJN[=idn]
 >>+11
_
  var typc=
  (twob)
__
g:ECJS[=idn,*r]->ECJS[=-idn] ITM
# ?>>?
   >>++
_
  if   typc=nom
    (othrb)
    space
    right
  elif typc=vrb
    (twob)
  else
    (twob)
    end
__
g:ECJN[=idn,*r]->ECJN[=-idn] ITM
 >>+
_
  (twob)
__

g:ITM[=nom]->NCLU
 >>+
__
g:ITM[=vrb,ing]->VCLU[^ing]
__
g:ITM[=vrb]->VCLU[^-ing]
__
g:ITM->ADJ
_
  left
__
g:ITM->ADV
_
  left
__

g:ADV->CONJ[@aftr] QUAN[@ind,adv]
 >>[$trlg]
_
  (twob)
__

g:ADV->PREP DEGR
 >>[$deg,trlg]++++
_
  (twob)
__

g:DEGR->NOUN[:val]
__
g:DEGR[:det]->DET[@sgl] DEGR[:-det]
_
  (twob)
__
g:DEGR->ADV[~prox] DEGR
_
  (twob)
__

g:ADJ[%*r]->QUAN[@cnj,ind,adv] ADJ
 n>4>>------
 n>2>>--
    >>+
_
  (twob)
__

g:ADV[~trlg]->QUAN[@ind,cnj,adv] NOUN[:-plur]
 r[&durn]>>+
         >>--------
_
  (brkts)
  (twob)
  (brkte)
__

g:NOUN->ADJ XID[:val]
  l[&*c]r[&*c]>>++++++
              >>--
_
  (twob)
__
g:NOUN->DET[@the] NOUN
#           ?>>?
          p<1>>-15
 l[&*c]r[&*c]>>++++
             >>-15
_
  (twob)
__
g:NOUN->DET[@the] DATE[:poss,val]
 >>++
_
  left
  space
  (brkts)
  right
  (brkte)
__
g:NOUN->NTTL
 >>++
__

g:BE->ADV[~mod] BE
 l[$deg]>>+++
        >>+
_
  (twob)
__
g:BE->BE ADV[~*x,timg]
 >>++++++
_
  (twob)
__

g:QUAN->AVQN
 >>--
__

p:desern  # decode tagged serial number
_
  split
  right
  back
  (brkts)
  find ++ <
  delete 2 >
  append .
  space
  merge
  (brkte)
__

g:NOUN[:*l]->NOUN[:-*l] SERN
  >>++
_
  left
  (desern)
__

g:NOUN[:qnt]->NOUN[:qnt] CONJ[@*r]
_
  (twob)
__

g:NOUN->SERN
 >>--
_ 
  (desern)
__

g:PUNC[|stop,*r]->PUNC[|stop] PUNC[|*r]
 >>++
__

g:CONJ->DCNJ
  >>----
__

g:ADV->NUM IADV
_
  (twob)
__
g:QUAN[@*r]->ADV[~mod] QUAN[@-*r]
  l[$deg]>>+1
         >>-6
_
  (twob)
__

g:DET->PRO[=imp] APOS
_
  (twob)
__

g:NOUN->NOAJ
  l[$*c]>>++
__
g:ADJ->NOAJ
  l[$*c]>>-
__

g:DET->DET NAVB
_
  left
  space
  (brkts)
  right
  (brkte)
__
g:APOS->PUNC[|stop,emb,*x] APOS
__

g:QEQ->QUAN PUNC[|quo,*r]
__
g:QUAN->PUNC[|quo,*l] QEQ
__

g:ADV->NAVB CMPC
 >>-
_
  (twob)
__

g:NOUN[:qnt]->CONJ[@-ind,adv] ADJ[%-*l,-*r]
 >>-
_
  (twob)
__

g:NAVB[:plur]->NAVB XS
_
  (twob)
__

g:DET[@aftr]->DET DATE
 >>+
_
  (twob)
__
g:DET[@aftr]->DET TIME
 >>+
_
  (twob)
__
g:DET->DET[@aftr] PUNC[|stop,emb,*x]
 >>-
_
  left
__

g:VERB->BE NAVB
  >>+
_
  (twob)
__

g:ADJX[%*r]->PUNC[|*l,-quo] ADJ
 >>++
_
__
g:ADJ[%*l,-*l]->ADJX[%-lquo] PUNC[|*r,-quo]
 >>+8
_
__

g:NOUN->DET[@the] ADJ[%est]
  >>--
_
  (twob)
__
g:NOUN->DEM[@the] ADJ[%est]
  >>--
_
  (twob)
__

g:PROX[=*l]->PRO PUNC[|*r]
__
g:PRO[=*r]->PUNC[|*l] PROX
__

g:ADJ[%*r]->CONJ[@ind,adv] ADJ[%-*l]
  n>3>>------
_
  (twob)
__

# special syntax

p:pbeg
_
# trace
  var add=
  peek > x
  if ~x SP
    space
    end
  left
# view 24
# show add (pbeg)
  insert < add
__
p:pbgr
_
  (pbeg)
  right
__

g:PEXP[|eg,com]->PUNC[|com] PEXP[|eg,-com]
 >>*r++
_
  (pbgr)
__

g:PEXP[|eg]->PEXP[|eg,com,-stop] PUNC[|com]
 >>++
__


# #######################
# internal dictionary for
# English function words

#
# special treatment for problematic words

d:to   <- TO
__
d:that <- THAT
__
d:tht  <- THAT
_
  append that
__

d:kind <- GENR
__

#
# inflectional endings

d:-'s  <- APOS
__
d:-ed  <- XED
  >>++
__
d:-er  <- XER
__
d:-est <- XEST
__
d:-ing <- XING
__
d:-n   <- XED
_ 
  append -ed
__
d:-s   <- XS
__
d:-t   <- XED
_
  append -ed
__
d:-’s  <- APOS  # Unicode apostrophe!
__

d:'s <- APOS
_
  append -'s
__
d:ſ  <- APOS    # using long s symbol for apostrophe s
_
  append -'s
__



#
# morphological suffixes

d:-able  <- SUFX[#vTOa]
__
d:-al    <- SUFX[#nTOa]
__
d:-ar    <- SUFX[#nTOa]
__
d:-ate   <- SUFX[#nTOa]
__
d:-ation <- SUFX[#vTOn]
__
d:-er    <- SUFX[#vTOn]
__
d:-ern   <- SUFX[#nTOa]
__
d:-ese   <- SUFX[#nTOn]
__
d:-ful   <- SUFX[#nTOa]
__
d:-ic    <- SUFX[#nTOa]
__
d:-ingly <- SUFX[#vTOr]
__
d:-ion   <- SUFX[#vTOn]
__
d:-ist  <- SUFX[#aTOn]
__
d:-ist  <- SUFX[#nTOn]
__
d:-ive  <- SUFX[#vTOa]
__
d:-ize  <- SUFX[#aTOv]
__
d:-ize  <- SUFX[#nTOv]
__
d:-ly   <- SUFX[#aTOr]
__
d:-ly   <- SUFX[#nTOa]
__
d:-ment <- SUFX[#vTOn]
__
d:-or   <- SUFX[#vTOn]
__
d:-ory  <- SUFX[#vTOa]
__
d:-ous  <- SUFX[#nTOa]
__
d:-y    <- SUFX[#aTOr]
__
d:-y    <- SUFX[#nTOa]
__

#
# pronouns

d:1    <- PRO[=one]
  >>+
_
  append ONE
__
d:he   <- PRO[=nom]
__
d:her  <- PRO
__
d:hers <- PRO
__
d:herself  <- PRO[=rflx]
__
d:him  <- PRO
__
d:himself  <- PRO[=rflx]
__
d:i    <- PRO[=nom]
  >>+
__
d:it   <- PRO[=it]
__
d:itself   <- PRO[=rflx]
__
d:me   <- PRO
__
d:mine <- PRO
__
d:myself   <- PRO[=rflx]
__
d:ours <- PRO
__
d:ourselves  <- PRO[=rflx]
__
d:she        <- PRO[=nom]
__
d:theirs     <-PRO
__
d:them       <- PRO
__
d:themselves <- PRO[=rflx]
__
d:they       <- PRO[=nom]
__
d:us         <- PRO
  >>+
__
d:we         <- PRO[=nom]
__
d:you        <- PRO
__
d:yours      <- PRO
__
d:yourself   <- PRO[=rflx]
__
d:yourselves <- PRO[=rflx]
__

#
# prepositions

d:about   <- PREP['prx]
__
d:above   <- PREP['prx]
__
d:across  <- PREP
  >>+
__
d:against <- PREP['div]
__
d:along   <- PREP
__
d:alongside <- PREP
__
d:amid    <- PREP
__
d:among   <- PREP
__
d:amongst <- PREP
__
d:around  <- PREP['prx]
  >>+
__
d:at   <- PREP
__
d:atop    <- PREP
__
d:below   <- PREP['prx]
  >>[&adv]+++
__
d:beside  <- PREP
__
d:between <- PREP
__
d:by   <- PREP['div]
__
d:during  <- PREP
__
d:except  <- PREP
__
d:for  <- PREP['div]
__
d:from <- PREP['div]
__
d:in   <- PREP['in,div]
__
d:inside  <- PREP
__
d:into <- PREP
__
d:like <- PREP['mod]
  >>++
__
d:near <- PREP
__
d:of   <- PREP['of,div]
__
d:off  <- PREP
  >>-
__
d:on   <- PREP['div,on]
__
d:onto <- PREP
__
d:outside <- PREP
  >>++++
__
d:over    <- PREP
__
d:per     <- PREP
__
d:round   <- PREP
__
d:through <- PREP
__
d:throughout <- PREP
  >>[&adv]++
__
d:till <- PREP
  >>+
__
d:to   <- PREP['to,div]
__
d:toward  <- PREP
__
d:towards <- PREP
__
d:under   <- PREP
  >>+
__
d:unto <- PREP
__
d:upon <- PREP
__
d:via  <- PREP
__
d:with <- PREP
__
d:within  <- PREP
  >>[&adv]++
__
d:without <- PREP['neg]
__

#
# preposition ambiguities

d:across <- POSTP[@adv]
 >>[$trlg,spat]-
__
d:ago    <- POSTP[@adv]
__
d:by     <- PRPV
__
d:of     <- PRPV
__

#
# verb particles

d:at   <- PTCL
__
d:down <- PTCL
 >>+2
__
d:in   <- PTCL
__
d:off  <- PTCL
__
d:on   <- PTCL
__
d:out  <- PTCL
 >>++
__
d:over <- PTCL
__
d:up   <- PTCL
__

#
# determiners and demonstratives

d:a   <- DET[@sgl,num]
__
d:an  <- DET[@sgl,num]
__
d:the <- DET[@the]
__

d:her   <- DEM[@the]
  >>++
__
d:his   <- DEM[@ind,the]
  >>[!spcs]
__
d:its   <- DEM[@the]
__
d:my    <- DEM[@the]
__
d:our   <- DEM[@the]
__
d:such  <- DEM[@ind]
__
d:that  <- DEM[@ind,sgl]
  >>[!spcs]
__
d:their <- DEM[@the]
__
d:them  <- DEM[@plur]
  >>--
__
d:these <- DEM[@ind,plur]
__
d:this  <- DEM[@ind,sgl,*l]
__
d:those <- DEM[@ind,plur]
__
d:what  <- DEM[@ind]
__
d:which <- DEM[@ind]
  >>--
__
d:whose <- DEM[@ind]
__
d:your  <- DEM[@the]
__

#
# conjunctions

d:cjwhat <- CONJ[@ind]
_
  append what
__

d:where <- CONJ[@rel,ind]
__
d:which <- CONJ[@rel,ind]
__
d:who   <- CONJ[@rel,ind]
__
d:whom  <- CONJ[@rel,ind]
__

d:albeit   <- CONJ
__
d:although <- CONJ
__
d:because  <- CONJ
__
d:else     <- CONJ[@*r]
__
d:how      <- CONJ[@ind,adv]
__
d:though   <- CONJ
__
d:unless   <- CONJ
__
d:until    <- CONJ
__
d:whatever <- CONJ[@rel]
__
d:whenever <- CONJ
__
d:whereas  <- CONJ
__
d:whether  <- CONJ
__
d:while    <- CONJ
__
d:whoever  <- CONJ[@rel,ind]
__
d:why      <- CONJ
__

d:& <- CONJ[@cnj]
__
d:/ <- CONJ[@cnj]
__
d:after   <- CONJ[@prep,aftr]
__
d:and     <- CONJ[@cnj]
 >>[!coord]
__
d:and/or  <- CONJ[@cnj]
 >>[!coord]
__
d:as      <- CONJ[@*x]
__
d:before  <- CONJ[@prep,aftr]
__
d:but     <- CONJ
__
d:despite <- CONJ
__
d:except  <- CONJ
__
d:if    <- CONJ
__
d:nor   <- CONJ[@cnj,qnt]
 >>[!coord]
__
d:or    <- CONJ[@cnj,qnt]
 >>[!coord]
__
d:plus  <- CONJ
__
d:since <- CONJ[@prep]
__
d:so    <- CONJ
__
d:than  <- CONJ
__
d:when  <- CONJ
__

d:neither <- ECJS
__
d:nor     <- ECJN
__
d:both    <- ECJS
__
d:and     <- ECJN
__
d:either  <- ECJS
__
d:or      <- ECJN
__

#
# quantifiers

d:all     <- QUAN[@ind,cnj,adv]
__
d:another <- QUAN[@ind,adv]
__
d:any     <- QUAN[@ind]
__
d:both    <- QUAN[@ind,cnj]
 >>[!corrl]
__
d:each    <- QUAN[@ind,cnj]
__
d:either  <- QUAN[@ind,cnj]
 >>[!corrl]
__
d:every   <- QUAN
__
d:many    <- QUAN[@ind,num]
 >>[!mltp]
__
d:no      <- QUAN
__
d:several <- QUAN[@ind,num]
 >>[!mltp]
__
d:some    <- QUAN[@ind,num]
__

#
# copula and auxiliaries

d:is   <- BE
__
d:am   <- BE
__
d:are  <- BE
__
d:was  <- BE
__
d:were <- BE
__
d:be   <- BE
__
d:been <- BE[^ed]
__
d:have <- HAVE
__
d:has  <- HAVE
 >>+
__
d:had  <- HAVE
 >>+
__
d:behv <- BE
 >>++
_
  append is
__
d:behv <- HAVE
_
  append has
__
d:hvbe <- BE
_
  append is
__
d:hvbe <- HAVE
 >>++
_
  append has
__
d:will   <- AUXL
__
d:shall  <- AUXL
__
d:would  <- AUXL
__
d:should <- AUXL
__
d:do   <- AUXL[^*l]
__
d:did  <- AUXL[^*l]
__
d:can  <- AUXL
  >>+
__
d:may  <- AUXL
  >>[$cond]
__
d:might  <- AUXL
__
d:must   <- AUXL
__
d:could  <- AUXL
__
d:cannot <- AUXL
__

d:'d <- AUXL
__
d:-'s <- BE
  >>------
_
  append is
__

#
# adverb forms

d:there <- ADV
__
d:thr   <- ADV
_
  append there
__
d:so   <- ADV[~int]
 >>++
__

d:never <- ADV
__
d:not  <- NEGN
__
d:non  <- PREF
__

d:mainly <- AVQN
__
d:mostly <- AVQN
__

#
# special rules not handled by punctuationRecognizer

d:〈 <- PUNC[|*l,quo]   # left  angle brackets
  >>++
_
  append ‘
__
d: 〉<- PUNC[|*r,quo]   # right angle brackets
  >>++
_
  append ’
__
d:-- <- PUNC[|*x]       # double-hyphen dash
__

#
# special cases for numbers

d:iii <- XID[:val]
__
d:iv  <- XID[:val]
__

d:1   <- XID[:val]
  >>[&*c]-
__
d:1   <- NUM
 >>[&prop]+
__
d:2   <- NUM[:cnj]
 >>[&two]--
_
  append two
__
d:x1x <- NUM
 >>++++
_
  append 1
__
d:x1stx <- NOUN[:det]
_
  append the 1st
__


#
# abbreviated titles missing a period

d:mr  <- TITL
__
d:mrs <- TITL
__
d:ms  <- TITL
__
d:dr  <- TITL
__
